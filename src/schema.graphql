input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: Int
}

type CreateUser {
  firstName: String!
  lastName: String!
  email: String!
  phone: Int
}

input UpdateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: Int
}

type UpdateUser {
   firstName:String!
   lastName:String!
   email: String!
   phone: Int
}

type DeleteUser {
  firstName:String!
  lastName:String!
  email:String!
  phone:Int
}

enum OrgSize {
  SMALL
  MEDIUM
  LARGE
}

enum Industry {
  HEALTHCARE
  AGRICULTURE
  AUTOMOBILE
  BANKING
  CONSTRUCTION
  EDUCATION
  OTHER
}

input CreateOrganizationInput {
  orgName: String!
  industry: Industry!
  orgSize: OrgSize
  firstName: String
}

type CreateOrganization {
  orgName: String!
  industry: Industry!
  orgSize: OrgSize
  firstName: String

}

input UpdateOrgInput {
  orgName: String!
  industry: Industry!
  orgSize: OrgSize
  firstName: String
}

type UpdateOrg {
  orgName: String!
  industry: Industry!
  orgSize: OrgSize
  firstName: String
}

type DeleteOrg {
  orgName: String!
  industry: Industry!
  orgSize: OrgSize
  firstName: String
}

type Query {
   getAllUsers: [CreateUser]
   getAllOrganizations: [CreateOrganization]
}

type Mutation {
  createUser(createUserInput: CreateUserInput): CreateUser
  updateUser(updateUserInput: UpdateUserInput ):UpdateUser
  deleteUser(firstName: String!):String
  createOrganization(createOrganizationInput: CreateOrganizationInput): CreateOrganization
  updateOrganization(updateOrgInput: UpdateOrgInput ): UpdateOrg
  deleteOrg(orgName: String!):String
}
